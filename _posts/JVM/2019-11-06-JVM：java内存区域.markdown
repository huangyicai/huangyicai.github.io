---
layout:     post
title:      "java内存区域"
subtitle:   "JVM"
date:       2019-11-06 12:13:00
author:     "黄益财"
header-img: "img/post-bg-css.jpg"
catalog: true
tags:
    - java基础
    - JVM
---

> “Yeah It's on. ”

java内存区域

## 运行时数据区域

> **java虚拟机在执行java程序的过程中会把它所管理的内存划分为若干个区域，这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有的区域则依赖用户线程的启动和结束而建立和销毁。java虚拟机可分为以下区域。**

<a href="http://file.c-mo.cn/2019/11/2019111419_3038684.jpg" target="_blank">
	![运行时数据区域](http://file.c-mo.cn/2019/11/2019111419_3038684.jpg)
</a>




- ###  1.程序计数器(Program Counter Register)

	- 程序计数器是一块较小的空间，可以看作是当前线程所执行的字节码的行号指示器。
	- 字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。
	- 在任何一个确定时刻，一个处理器只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储。
	- 如果线程正在执行的是一个java方法，这个计数器记录的是正在执行的虚拟机字节码指令地址；如果是一个Native方法，则计数器值为`Undefined`此内存区域是唯一在JVM规范中没有规定任何`OutOfMemoryError`情况的区域。

- ###  2.java虚拟机栈(Java Virtual Machine Stacks)

	- 与程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期与线程相同。
	- 每个方法在执行的同时都会创建一个栈帧*（[栈帧结构详解](http://blog.hoarfrost.cn/2019/11/06/JVM-java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/ "方法运行时栈帧结构")）*用于存储局部变量、操作数栈、动态链接、方法出口等信息。每个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。
	- 在JVM规范中，对这个区域规定了两种异常情况：*（[各区域的内存溢出异常详解](http://blog.hoarfrost.cn/2019/11/06/JVM-java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/ "各内存区域的内存溢出异常情况详解")）*
		1. 若线程请求的栈深度大于虚拟机允许的深度，将抛出`StackOverflowError`异常；
		2. 若虚拟机栈可以动态扩展（当前大部分虚拟机都可动态扩展，只不过JVM规范中也允许固定长度的虚拟机栈），扩展时无法申请到足够的内存，将抛出`OutOfMemoryError`异常；

<a href="" target="_blank">
![运行时数据区域](https://img-blog.csdnimg.cn/20190713124857717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjc2MjEzMw==,size_16,color_FFFFFF,t_70)
</a>

- ###  3.本地方法栈(Native Method Stack)

	- 本地方法栈与虚拟机栈所发挥的作用非常相似，他们之间区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务；
	- 与虚拟机栈一样，本地方法栈区域也会抛出`StackOverflowError`和`OutOfMemoryError`异常；

- ###  4.Java 堆(Java Heap)

	- 它是Java虚拟机所管理的内存中最大的一块，被所有线程共享的内存区域。此区域唯一的目的就是存放对象实例和数组，几乎所有的对象实例和数组都在这里分配内存。
	- 它是垃圾收集器管理的主要区域，也叫做“GC堆”，从内存回收角度来看，由于现在收集器基本采用分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致一点的又Eden区、From Survivor空间、To Survivor空间等。
	- 它的大小可扩展，通过-Xmx和-Xms控制，若在堆中没有内存完成实例分配，且堆也无法再扩展时，会抛出`OutOfMemoryError`异常。

- ###  5.方法区(Method Area)

	- 方法区与Java堆一样, 是各个线程共享的内存区域, 它用于存储已被虚拟机加载的类信息, 常量, 静态变量, 即时编译器编译后的代码等数据。 虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分, 但是它却有一个别名叫做Non-Heap非堆, 目的应该是与Java Heap 区分开来。
	- 在JDK1.7以前HotSpot虚拟机使用永久代来实现方法区，永久代的大小在启动JVM时可以设置一个固定值(`-XX:MaxPermSize`),不可变；
	- 在JDK1.7中 存储在永久代的部分数据就已经转移到Java Heap或者Native memory。譬如符号引用(Symbols)转移到了native memory，原本存放在永久代的字符常量池移出。但永久代仍存在于JDK 1.7中，并没有完全移除。
	- JDK1.8中进行了较大改动：
		1. 移除了永久代（PermGen），替换为元空间（Metaspace）；
		2. 永久代中的 class metadata 转移到了 native memory（本地内存，而不是虚拟机）；
		3. 永久代中的 interned Strings 和 class static variables 转移到了 Java heap；
		4. 永久代参数 （`PermSize MaxPermSize`） -> 元空间参数（`MetaspaceSize MaxMetaspaceSize`）

- ###  6.运行时常量池(Runtime Constant Pool)

	- 运行时常量池是方法区的一部分(虚拟机规范)。 Class文件中除了有类的版本, 字段,方法, 接口等描述信息外, 还有一项信息是常量池(Constant Pool Table), 用于存放编译期生成的各种字面量和符号引用, 这部分内容将在类加载后存放到方法区的运行时常量池中。
	- 运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性, Java语言并不要求常量一定只能在编译期产生, 也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池, 运行期间也可能将新的常量放入池中, 这种特性被开发人员利用的比较多的便是String类的intern() 方法。

- ###  7.直接内存(Direct Memory)

	- 直接内存并不是虚拟机运行时数据区的一部分, 也不是Java虚拟机规范中定义的内存区域, 但是这部分内存也被频繁地使用, 而且也可能导致`OutOfMemoryError`异常出现;
	- 在JDK1.4 中新加入的NIO 类，引入了一种基于通道（Channel）和缓冲区（Buffer）的I/O 形式，他可以使用Native 函数直接分配堆外内存，然后通过一个存储在Java 堆中的`DirectByteBuffer`对象作为这块内存的引用进行操作。这样能在一些场所显著提高性能，因为避免了在Java 堆和Native 堆中来回复制数据;
	- 显然, 本机直接内存的分配不会受到Java堆大小的限制, 但是, 既然是内存, 则肯定还是会受到本机总内存的大小及处理器寻址空间的限制。 服务器管理员配置虚拟机参数时, 一般会根据实际内存-Xmx等参数信息, 但经常会忽略到直接内存, 使得各个内存区域的总和大于物理内存限制(包括物理上的和操作系统级的限制), 从而导致动态扩展时出现`OutOfMemoryError`异常;

---

> 参考文献：《深入理解Java虚拟机》-周志明 著












